
#ifndef __TETROMINOTRIS_CONFIG_H__
#define __TETROMINOTRIS_CONFIG_H__

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <stdbool.h>
#include <unistd.h>
#include <errno.h>

#cmakedefine CURSES_HAVE_NCURSES_H
#ifdef CURSES_HAVE_NCURSES_H
#   include "ncurses.h"
#   include "menu.h"
#endif

#cmakedefine CURSES_HAVE_NCURSES_NCURSES_H
#ifdef CURSES_HAVE_NCURSES_NCURSES_H
#   include "ncurses/ncurses.h"
#   include "ncurses/menu.h"
#endif

#cmakedefine CURSES_HAVE_NCURSES_CURSES_H
#ifdef CURSES_HAVE_NCURSES_CURSES_H
#   include "ncurses/curses.h"
#   include "ncurses/menu.h"
#endif

#cmakedefine TETROMINOTRIS_NAME "@TETROMINOTRIS_NAME@"
#ifndef TETROMINOTRIS_NAME
#   define TETROMINOTRIS_NAME "tetrominotris"
#endif

#cmakedefine TETROMINOTRIS_VERSION "@TETROMINOTRIS_VERSION@"
#ifndef TETROMINOTRIS_VERSION
#   define TETROMINOTRIS_VERSION "<unknown>"
#endif

#cmakedefine TBOARD_DEBUG

/*
 * @typedef TGridPos
 *
 * Positions on the game board grid will exist as coordinate
 * pairs, but we will need to map them to (byte, bit) indices.
 */
typedef struct {
    unsigned int    i, j;
} TGridPos;

/*
 * @function TGridPosMake
 *
 * Initialize and return a grid position data structure.
 */
static inline TGridPos
TGridPosMake(
    unsigned int    i,
    unsigned int    j
)
{
    TGridPos        P = { .i = i, .j = j };
    return P;
}


/*
 * @typedef TGridIndex
 *
 * Position in the game board grid w.r.t. the word index
 * W and bit index b within that byte.
 */
typedef struct {
    unsigned int    W, b;
} TGridIndex;

/*
 * @function TGridIndexMake
 *
 * Initialize and return a grid index data structure.
 */
static inline TGridIndex
TGridIndexMake(
    unsigned int    W,
    unsigned int    b
)
{
    TGridIndex      I = { .W = W, .b = b };
    return I;
}

#endif /* __TETROMINOTRIS_CONFIG_H__ */

